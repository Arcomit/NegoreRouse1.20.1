buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

apply plugin: 'org.spongepowered.mixin'

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

//启用嵌套模组依赖
jarJar.enable()
minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            // Mixin
            arg "-mixin.config=negorerouse.mixins.json"
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
            // Mixin
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            // Mixin
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Mixin
mixin {
    add sourceSets.main, "negorerouse.refmap.json"
    config 'negorerouse.mixins.json'

    debug.verbose = true
    debug.export = true
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
     flatDir {
         dir 'libs'
     }

    maven {
        name "KosmX's maven"
        url 'https://maven.kosmx.dev/'
    }

    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }

    maven {
        url "https://cursemaven.com"
    }

    maven {
        url = "https://maven.firstdarkdev.xyz/snapshots"
    } // LDLib, Photon

    repositories {
        maven {
            name = "Illusive Soulworks maven"
            url = "https://maven.theillusivec4.top/"
        }
    }// Curios
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    //添加 Mixin 支持
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"

    //拔刀剑：重锋
    implementation fg.deobf("curse.maven:slashblade-resharped-1022428:6250353")
    //玩家动画库
    implementation fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:1.0.2-rc1+1.20")

    //光子
    implementation fg.deobf("com.lowdragmc.ldlib:ldlib-forge-1.20.1:1.0.33.b") { transitive = false }
    implementation fg.deobf("com.lowdragmc.photon:photon-forge-1.20.1:1.1.0") { transitive = false }
    //编译时打包依赖
    jarJar(group: 'com.lowdragmc.photon', name: 'photon-forge-1.20.1', version: '[1.1.0,)') {
        //避免打包多余的依赖（如依赖的依赖）
        exclude group: 'com.lowdragmc.ldlib', module: 'ldlib-forge-1.20.1'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }

    //JEI
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))
    //EMI
    compileOnly fg.deobf("dev.emi:emi-forge:${emi_version}:api")
    runtimeOnly fg.deobf("dev.emi:emi-forge:${emi_version}")

    //假人(含前置)
    runtimeOnly fg.deobf("curse.maven:selene-499980:6023899")
    runtimeOnly fg.deobf("curse.maven:mmmmmmmmmmmm-225738:5737040")
    //性能分析工具模组
    runtimeOnly fg.deobf("curse.maven:spark-361579:4738952")
    //光影
    runtimeOnly fg.deobf("curse.maven:xenon-564239:5752040")
    runtimeOnly fg.deobf("curse.maven:oculus-581495:5299671")\

    //饰品模组
    compileOnly(fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api"))
    runtimeOnly(fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}"))
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // 使用 UTF-8 编码进行 Java 编译
}
